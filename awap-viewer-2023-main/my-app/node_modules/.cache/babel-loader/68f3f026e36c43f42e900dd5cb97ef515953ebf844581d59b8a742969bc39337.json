{"ast":null,"code":"var _jsxFileName = \"/Users/jding/awap-viewer-2023-1/awap-viewer-2023-main/my-app/src/components/GridBoard/GridBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo, useRef, useContext, useCallback } from \"react\";\nimport { ViewerContext } from \"../../pages/Viewer\";\nimport GridSquare from \"./GridSquare\";\nimport RobotSquare from \"./RobotSquare\";\nimport \"./Grid.css\";\nimport ExplorerImgRed from \"../../new-img/light-outline-red.PNG\";\nimport TerraformerImgRed from \"../../new-img/shovel-outline-red.PNG\";\nimport MinerImgRed from \"../../new-img/pick-outline-red.PNG\";\nimport ExplorerImgBlue from \"../../new-img/light-outline-blue.PNG\";\nimport TerraformerImgBlue from \"../../new-img/shovel-outline-blue.PNG\";\nimport MinerImgBlue from \"../../new-img/pick-outline-blue.PNG\";\nimport MetalImg from \"../../img/metal_outline.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GridBoard(props) {\n  _s();\n  const isP1Vis = props.isP1VisToggled;\n  const isP2Vis = props.isP2VisToggled;\n  const {\n    replay,\n    sliderValue,\n    setSliderValue,\n    isPlay,\n    setIsPlay,\n    framePlaying,\n    setIsFinished,\n    speed,\n    setTiles,\n    tiles,\n    setFrame,\n    redMetal,\n    blueMetal,\n    setRedMetal,\n    setBlueMetal,\n    redTerraform,\n    setRedTerraform,\n    blueTerraform,\n    setBlueTerraform\n  } = useContext(ViewerContext);\n  const nrows = replay.map_height;\n  const ncols = replay.map_width;\n  const initImpass = replay.initial_map_passability;\n  const initMetal = replay.initial_map_metal;\n  const initTerr = replay.initial_map_terraformed;\n  const initVis = replay.initial_map_visible;\n  const gameTurns = replay.turns;\n  const [index, setIndex] = useState(-1);\n  const intervalID = useRef(null);\n\n  // States for displaying various elements\n  const [grid, setGrid] = useState(null);\n  const [robots, setRobots] = useState(null);\n  const prevRobots = useRef({}); // dictionary mapping robot ids to coordinates\n  const [visibilityP1, setVisibilityP1] = useState(null);\n  const [visibilityP2, setVisibilityP2] = useState(null);\n\n  // Initializes tile grid\n  // eslint-disable-next-line\n  const initialGrid = useMemo(() => {\n    let tempArr = [];\n    let tileInfo = [];\n    // Passable tiles\n    for (let row = 0; row < nrows; row++) {\n      tempArr.push([]);\n      tileInfo.push([]);\n      for (let col = 0; col < ncols; col++) {\n        tempArr[row].push( /*#__PURE__*/_jsxDEV(GridSquare, {\n          color: \"0\",\n          useImg: null\n        }, `${col}${row}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this));\n        tileInfo[row].push([0, 0]);\n      }\n    }\n    const populateTiles = (tileArr, colorID, useImg) => {\n      for (let tile of tileArr) {\n        let c = tile[0];\n        let r = tile[1];\n        tempArr[r][c] = /*#__PURE__*/_jsxDEV(GridSquare, {\n          color: colorID,\n          useImg: useImg\n        }, `${c}${r}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this);\n        if (colorID === 1) {\n          tileInfo[r][c][0] = 'I';\n        } else if (colorID === 2) {\n          tileInfo[r][c][0] = 'M';\n        }\n      }\n    };\n    populateTiles(initImpass, 1, null);\n    populateTiles(initMetal, 2, MetalImg);\n    for (let terr_tile of initTerr) {\n      let c = terr_tile[0];\n      let r = terr_tile[1];\n      let terrNum = terr_tile[2];\n      tempArr[r][c] = /*#__PURE__*/_jsxDEV(GridSquare, {\n        color: terrNum > 0 ? 3 : 4,\n        useImg: null\n      }, `${c}${r}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this);\n      tileInfo[r][c][0] = terrNum;\n      tileInfo[r][c][1] = terrNum > 0 ? 1 : 2;\n    }\n    setGrid(tempArr);\n    setTiles(tileInfo);\n    setIndex(-1);\n    clearInterval(intervalID.current);\n    intervalID.current = null;\n    return [tempArr, tileInfo];\n  }, [nrows, ncols, initImpass, initMetal, initTerr, setTiles]);\n\n  // Initializes robot grid\n  // eslint-disable-next-line\n  const initialRobots = useMemo(() => {\n    let tempArr = [];\n    for (let row = 0; row < nrows; row++) {\n      tempArr.push([]);\n      for (let col = 0; col < ncols; col++) {\n        tempArr[row].push( /*#__PURE__*/_jsxDEV(RobotSquare, {\n          x: col,\n          y: row,\n          hasRobot: false,\n          battery: 0\n        }, `${col}${row}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this));\n      }\n    }\n    setRobots(tempArr);\n    prevRobots.current = {};\n    return tempArr;\n    // eslint-disable-next-line\n  }, [nrows, ncols, replay]);\n\n  // Initializes visibility grid\n  const makeVisGrid = useCallback(player => {\n    let tempArr = [];\n    for (let row = 0; row < nrows; row++) {\n      tempArr.push([]);\n      for (let col = 0; col < ncols; col++) {\n        tempArr[row].push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `grid-square ${player}tint`\n        }, `${col}${row}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this));\n      }\n    }\n    for (let vis_tile of initVis) {\n      let x = vis_tile[0];\n      let y = vis_tile[1];\n      let pl = vis_tile[2];\n      if (player === \"RED\" && pl === 1 || player === \"BLUE\" && pl === 2) {\n        tempArr[y][x] = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-square\"\n        }, `${x}${y}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 27\n        }, this);\n      }\n    }\n    return tempArr;\n  }, [nrows, ncols, initVis]);\n\n  // eslint-disable-next-line\n  const p1InitialVis = useMemo(() => {\n    let p1TempArr = makeVisGrid(\"RED\");\n    setVisibilityP1(p1TempArr);\n    return p1TempArr;\n    // eslint-disable-next-line\n  }, [makeVisGrid]);\n  const p2InitialVis = useMemo(() => {\n    let p2TempArr = makeVisGrid(\"BLUE\");\n    setVisibilityP2(p2TempArr);\n    return p2TempArr;\n  }, [makeVisGrid]);\n  const makeDeepCopy = arr => {\n    const arrCopy = arr.map((row, i) => {\n      return row.map((elem, j) => {\n        return elem;\n      });\n    });\n    return arrCopy;\n  };\n  const makeDeepCopy3D = arr => {\n    const arrCopy = arr.map((row, i) => {\n      return row.map((elemArr, j) => {\n        return elemArr.map((elem, k) => {\n          return elem;\n        });\n      });\n    });\n    return arrCopy;\n  };\n\n  // animates grid when index changes\n  useEffect(() => {\n    if (sliderValue >= gameTurns.length) {\n      clearInterval(intervalID.current);\n      intervalID.current = null;\n      setIsFinished(true);\n      return;\n    } else if (sliderValue <= -1) {} else {\n      // Updates input arrays in place\n      const updateFrame = (i, nextGrid, nextVisP1, nextVisP2, nextRobots, nextTileInfo) => {\n        if (i < 0) return;\n        let turn = gameTurns[i];\n        let player = turn.team;\n        if (player === \"red\") {\n          //Setting Red Metal Array\n          const temp = redMetal;\n          temp.push(turn.metal);\n          setRedMetal(temp);\n          setFrame(sliderValue / 2);\n          const temp2 = redTerraform;\n          // console.log(\"temp2: \" + temp2)\n          // console.log(\"length: \" + (temp2.length))\n          temp2.push(turn.tiles_terraformed.length);\n          setRedTerraform(temp2);\n        } else {\n          //Setting Blue Metal Array\n          const temp = blueMetal;\n          temp.push(turn.metal);\n          setBlueMetal(temp);\n          setFrame((sliderValue - 1) / 2);\n          const temp2 = blueTerraform;\n          temp2.push(turn.tiles_terraformed.length);\n          setBlueTerraform(temp2);\n        }\n\n        // Update visibility\n        for (let visCh of turn.tiles_explored) {\n          let x = visCh[0];\n          let y = visCh[1];\n          if (player === \"red\") {\n            nextVisP1[y][x] = /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"grid-square\"\n            }, `${x}${y}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 15\n            }, this);\n            if (nextTileInfo[y][x][1] === 1 || nextTileInfo[y][x][1] === 0) {\n              nextTileInfo[y][x][1] = 1;\n            } else {\n              nextTileInfo[y][x][1] = 3;\n            }\n          } else {\n            nextVisP2[y][x] = /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"grid-square\"\n            }, `${x}${y}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 15\n            }, this);\n            if (nextTileInfo[y][x][1] === 2 || nextTileInfo[y][x][1] === 0) {\n              nextTileInfo[y][x][1] = 2;\n            } else {\n              nextTileInfo[y][x][1] = 3;\n            }\n          }\n        }\n\n        // Update terrformedness\n        for (let terrCh of turn.tiles_terraformed) {\n          let x = terrCh[0];\n          let y = terrCh[1];\n          let terrNum = -1;\n          if (player === \"red\") {\n            terrNum = 1;\n          }\n          terrNum = terrNum + nextTileInfo[y][x][0];\n          let terrCol = 0;\n          if (terrNum > 0) {\n            terrCol = 3;\n          } else if (terrNum < 0) {\n            terrCol = 4;\n          }\n          nextGrid[y][x] = /*#__PURE__*/_jsxDEV(GridSquare, {\n            color: terrCol,\n            useImg: null\n          }, `${x}${y}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 13\n          }, this);\n          nextTileInfo[y][x][0] = terrNum;\n          if (y === 1 && x === 1) {}\n        }\n\n        // Modify robots\n        for (let robotCh of turn.robot_changes) {\n          // Remove robot at prev position if it exists\n          let robotID = robotCh[0];\n          if (robotID in prevRobots.current) {\n            let xPrev = prevRobots.current[robotID][0];\n            let yPrev = prevRobots.current[robotID][1];\n            nextRobots[yPrev][xPrev] = /*#__PURE__*/_jsxDEV(RobotSquare, {\n              x: xPrev,\n              y: yPrev,\n              hasRobot: false\n            }, `${xPrev}${yPrev}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 15\n            }, this);\n          }\n\n          // Add robot at new position\n          let x = robotCh[1];\n          let y = robotCh[2];\n          if (x !== -1 && y !== -1) {\n            let robotType = robotCh[3];\n            let battery = robotCh[4];\n            let robotImg;\n            if (player === \"red\") {\n              if (robotType === \"e\") robotImg = ExplorerImgRed;else if (robotType === \"t\") robotImg = TerraformerImgRed;else robotImg = MinerImgRed;\n            } else {\n              if (robotType === \"e\") robotImg = ExplorerImgBlue;else if (robotType === \"t\") robotImg = TerraformerImgBlue;else robotImg = MinerImgBlue;\n            }\n            nextRobots[y][x] = /*#__PURE__*/_jsxDEV(RobotSquare, {\n              srcImg: robotImg,\n              x: x,\n              y: y,\n              hasRobot: true,\n              type: robotType,\n              battery: battery,\n              id: robotID\n            }, `${x}${y}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 15\n            }, this);\n            // Store robot coordinates\n            prevRobots.current[robotID] = [x, y];\n          }\n        }\n      };\n      var idx;\n      if (sliderValue >= index) {\n        idx = index;\n        const newGrid = makeDeepCopy(grid);\n        const newVisP1 = makeDeepCopy(visibilityP1);\n        const newVisP2 = makeDeepCopy(visibilityP2);\n        const newRobots = makeDeepCopy(robots);\n        const newTileInfo = makeDeepCopy3D(tiles);\n        while (idx <= sliderValue) {\n          updateFrame(idx, newGrid, newVisP1, newVisP2, newRobots, newTileInfo);\n          idx += 1;\n        }\n        setGrid(newGrid);\n        setVisibilityP1(newVisP1);\n        setVisibilityP2(newVisP2);\n        setRobots(newRobots);\n        setTiles(newTileInfo);\n      } else {\n        const arr = initialGrid;\n        const newGrid = makeDeepCopy(arr[0]);\n        const newVisP1 = makeDeepCopy(p1InitialVis);\n        const newVisP2 = makeDeepCopy(p2InitialVis);\n        const newRobots = makeDeepCopy(initialRobots);\n        const newTileInfo = makeDeepCopy3D(arr[1]);\n        idx = 0;\n        while (idx <= sliderValue) {\n          updateFrame(idx, newGrid, newVisP1, newVisP2, newRobots, newTileInfo);\n          idx += 1;\n        }\n        setGrid(newGrid);\n        setVisibilityP1(newVisP1);\n        setVisibilityP2(newVisP2);\n        setRobots(newRobots);\n        setTiles(newTileInfo);\n      }\n      setIndex(idx - 1);\n      if (!framePlaying) {\n        setIsPlay(false);\n      }\n    }\n    // eslint-disable-next-line\n  }, [sliderValue, gameTurns]);\n  const iterateFrames = useCallback(() => {\n    setIndex(index => index + 1);\n    setSliderValue(s => s + 1);\n  }, [setSliderValue]);\n  const runAnimation = useCallback(() => {\n    clearInterval(intervalID.current);\n    intervalID.current = null;\n    intervalID.current = setInterval(iterateFrames, 500 / speed >> 0);\n  }, [speed, iterateFrames]);\n  useEffect(() => {\n    if (isPlay) {\n      runAnimation();\n    } else {\n      clearInterval(intervalID.current);\n      intervalID.current = null;\n    }\n  }, [isPlay, setSliderValue, runAnimation]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isP2Vis && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board visibility\",\n      children: visibilityP2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 19\n    }, this), isP1Vis && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board visibility\",\n      children: visibilityP1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board robot\",\n      children: robots\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board grid\",\n      children: grid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 411,\n    columnNumber: 5\n  }, this);\n}\n_s(GridBoard, \"ZEbyIxRaMJT+6qz2ezvd7BzXx0I=\");\n_c = GridBoard;\nvar _c;\n$RefreshReg$(_c, \"GridBoard\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useRef","useContext","useCallback","ViewerContext","GridSquare","RobotSquare","ExplorerImgRed","TerraformerImgRed","MinerImgRed","ExplorerImgBlue","TerraformerImgBlue","MinerImgBlue","MetalImg","GridBoard","props","isP1Vis","isP1VisToggled","isP2Vis","isP2VisToggled","replay","sliderValue","setSliderValue","isPlay","setIsPlay","framePlaying","setIsFinished","speed","setTiles","tiles","setFrame","redMetal","blueMetal","setRedMetal","setBlueMetal","redTerraform","setRedTerraform","blueTerraform","setBlueTerraform","nrows","map_height","ncols","map_width","initImpass","initial_map_passability","initMetal","initial_map_metal","initTerr","initial_map_terraformed","initVis","initial_map_visible","gameTurns","turns","index","setIndex","intervalID","grid","setGrid","robots","setRobots","prevRobots","visibilityP1","setVisibilityP1","visibilityP2","setVisibilityP2","initialGrid","tempArr","tileInfo","row","push","col","populateTiles","tileArr","colorID","useImg","tile","c","r","terr_tile","terrNum","clearInterval","current","initialRobots","makeVisGrid","player","vis_tile","x","y","pl","p1InitialVis","p1TempArr","p2InitialVis","p2TempArr","makeDeepCopy","arr","arrCopy","map","i","elem","j","makeDeepCopy3D","elemArr","k","length","updateFrame","nextGrid","nextVisP1","nextVisP2","nextRobots","nextTileInfo","turn","team","temp","metal","temp2","tiles_terraformed","visCh","tiles_explored","terrCh","terrCol","robotCh","robot_changes","robotID","xPrev","yPrev","robotType","battery","robotImg","idx","newGrid","newVisP1","newVisP2","newRobots","newTileInfo","iterateFrames","s","runAnimation","setInterval"],"sources":["/Users/jding/awap-viewer-2023-1/awap-viewer-2023-main/my-app/src/components/GridBoard/GridBoard.js"],"sourcesContent":["import React, {\n  useState,\n  useEffect,\n  useMemo,\n  useRef,\n  useContext,\n  useCallback,\n} from \"react\"\nimport { ViewerContext } from \"../../pages/Viewer\"\nimport GridSquare from \"./GridSquare\"\nimport RobotSquare from \"./RobotSquare\"\nimport \"./Grid.css\"\nimport ExplorerImgRed from \"../../new-img/light-outline-red.PNG\"\nimport TerraformerImgRed from \"../../new-img/shovel-outline-red.PNG\"\nimport MinerImgRed from \"../../new-img/pick-outline-red.PNG\"\nimport ExplorerImgBlue from \"../../new-img/light-outline-blue.PNG\"\nimport TerraformerImgBlue from \"../../new-img/shovel-outline-blue.PNG\"\nimport MinerImgBlue from \"../../new-img/pick-outline-blue.PNG\"\nimport MetalImg from \"../../img/metal_outline.png\"\n\nexport default function GridBoard(props) {\n  const isP1Vis = props.isP1VisToggled\n  const isP2Vis = props.isP2VisToggled\n  const {\n    replay,\n    sliderValue,\n    setSliderValue,\n    isPlay,\n    setIsPlay,\n    framePlaying,\n    setIsFinished,\n    speed,\n    setTiles,\n    tiles,\n    setFrame,\n    redMetal,\n    blueMetal,\n    setRedMetal,\n    setBlueMetal,\n    redTerraform,\n    setRedTerraform,\n    blueTerraform,\n    setBlueTerraform\n  } = useContext(ViewerContext)\n\n  const nrows = replay.map_height\n  const ncols = replay.map_width\n  const initImpass = replay.initial_map_passability\n  const initMetal = replay.initial_map_metal\n  const initTerr = replay.initial_map_terraformed\n  const initVis = replay.initial_map_visible\n  const gameTurns = replay.turns\n\n  const [index, setIndex] = useState(-1)\n  const intervalID = useRef(null)\n\n  // States for displaying various elements\n  const [grid, setGrid] = useState(null)\n  const [robots, setRobots] = useState(null)\n  const prevRobots = useRef({}) // dictionary mapping robot ids to coordinates\n  const [visibilityP1, setVisibilityP1] = useState(null)\n  const [visibilityP2, setVisibilityP2] = useState(null)\n\n  // Initializes tile grid\n  // eslint-disable-next-line\n  const initialGrid = useMemo(() => {\n    let tempArr = []\n    let tileInfo = []\n    // Passable tiles\n    for (let row = 0; row < nrows; row++) {\n      tempArr.push([])\n      tileInfo.push([])\n      for (let col = 0; col < ncols; col++) {\n        tempArr[row].push(\n          <GridSquare key={`${col}${row}`} color=\"0\" useImg={null} />\n        )\n        tileInfo[row].push([0, 0])\n      }\n    }\n\n    const populateTiles = (tileArr, colorID, useImg) => {\n      for (let tile of tileArr) {\n        let c = tile[0]\n        let r = tile[1]\n        tempArr[r][c] = (\n          <GridSquare key={`${c}${r}`} color={colorID} useImg={useImg} />\n        )\n        if (colorID === 1) {\n          tileInfo[r][c][0] = 'I'\n        } else if (colorID === 2) {\n          tileInfo[r][c][0] = 'M'\n        }\n\n      }\n    }\n\n    populateTiles(initImpass, 1, null)\n    populateTiles(initMetal, 2, MetalImg)\n    for (let terr_tile of initTerr) {\n      let c = terr_tile[0]\n      let r = terr_tile[1]\n      let terrNum = terr_tile[2]\n      tempArr[r][c] = (\n        <GridSquare\n          key={`${c}${r}`}\n          color={terrNum > 0 ? 3 : 4}\n          useImg={null}\n        />\n      )\n      tileInfo[r][c][0] = terrNum\n      tileInfo[r][c][1] = terrNum > 0 ? 1 : 2\n    }\n\n    setGrid(tempArr)\n    setTiles(tileInfo)\n    setIndex(-1)\n    clearInterval(intervalID.current)\n    intervalID.current = null\n    return [tempArr, tileInfo]\n  }, [nrows, ncols, initImpass, initMetal, initTerr, setTiles])\n\n  // Initializes robot grid\n  // eslint-disable-next-line\n  const initialRobots = useMemo(() => {\n    let tempArr = []\n    for (let row = 0; row < nrows; row++) {\n      tempArr.push([])\n      for (let col = 0; col < ncols; col++) {\n        tempArr[row].push(\n          <RobotSquare key={`${col}${row}`} x={col} y={row} hasRobot={false} battery={0}/>\n        )\n      }\n    }\n    setRobots(tempArr)\n    prevRobots.current = {}\n    return tempArr\n    // eslint-disable-next-line\n  }, [nrows, ncols, replay])\n\n  // Initializes visibility grid\n  const makeVisGrid = useCallback(\n    (player) => {\n      let tempArr = []\n      for (let row = 0; row < nrows; row++) {\n        tempArr.push([])\n        for (let col = 0; col < ncols; col++) {\n          tempArr[row].push(\n            <div\n              key={`${col}${row}`}\n              className={`grid-square ${player}tint`}\n            ></div>\n          )\n        }\n      }\n\n      for (let vis_tile of initVis) {\n        let x = vis_tile[0]\n        let y = vis_tile[1]\n        let pl = vis_tile[2]\n        if ((player === \"RED\" && pl === 1) || (player === \"BLUE\" && pl === 2)) {\n          tempArr[y][x] = <div key={`${x}${y}`} className=\"grid-square\"></div>\n        }\n      }\n      return tempArr\n    },\n    [nrows, ncols, initVis]\n  )\n\n  // eslint-disable-next-line\n  const p1InitialVis = useMemo(() => {\n    let p1TempArr = makeVisGrid(\"RED\")\n    setVisibilityP1(p1TempArr)\n    return p1TempArr\n    // eslint-disable-next-line\n  }, [makeVisGrid])\n\n  const p2InitialVis = useMemo(() => {\n    let p2TempArr = makeVisGrid(\"BLUE\")\n    setVisibilityP2(p2TempArr)\n    return p2TempArr\n  }, [makeVisGrid])\n\n  const makeDeepCopy = (arr) => {\n    const arrCopy = arr.map((row, i) => {\n      return row.map((elem, j) => {\n        return elem\n      })\n    })\n    return arrCopy\n  }\n\n  const makeDeepCopy3D = (arr) => {\n    const arrCopy = arr.map((row, i) => {\n      return row.map((elemArr, j) => {\n        return elemArr.map((elem, k) => {\n          return elem\n        })\n      })\n    })\n    return arrCopy\n  }\n\n  // animates grid when index changes\n  useEffect(() => {\n    if (sliderValue >= gameTurns.length) {\n      clearInterval(intervalID.current)\n      intervalID.current = null\n      setIsFinished(true)\n      return\n    } else if (sliderValue <= -1) {\n    } else {\n      // Updates input arrays in place\n      const updateFrame = (i, nextGrid, nextVisP1, nextVisP2, nextRobots, nextTileInfo) => {\n        if (i < 0) return\n        let turn = gameTurns[i]\n        let player = turn.team\n\n        if(player === \"red\"){\n          //Setting Red Metal Array\n          const temp = redMetal\n          temp.push(turn.metal)\n          setRedMetal(temp)\n          setFrame(sliderValue/2)\n          \n          const temp2 = redTerraform\n          // console.log(\"temp2: \" + temp2)\n          // console.log(\"length: \" + (temp2.length))\n          temp2.push((turn.tiles_terraformed).length)\n          setRedTerraform(temp2)\n\n        } else {\n          //Setting Blue Metal Array\n          const temp = blueMetal\n          temp.push(turn.metal)\n          setBlueMetal(temp)\n          setFrame((sliderValue-1)/2)\n\n          const temp2 = blueTerraform\n          temp2.push((turn.tiles_terraformed).length)\n          setBlueTerraform(temp2)\n        }\n\n        // Update visibility\n        for (let visCh of turn.tiles_explored) {\n          let x = visCh[0]\n          let y = visCh[1]\n\n          if (player === \"red\") {\n            nextVisP1[y][x] = (\n              <div key={`${x}${y}`} className=\"grid-square\"></div>\n            )\n            if (nextTileInfo[y][x][1] === 1 || nextTileInfo[y][x][1] === 0) {\n              nextTileInfo[y][x][1] = 1\n            } else {\n              nextTileInfo[y][x][1] = 3\n            }\n          } else {\n            nextVisP2[y][x] = (\n              <div key={`${x}${y}`} className=\"grid-square\"></div>\n            )\n            if (nextTileInfo[y][x][1] === 2 || nextTileInfo[y][x][1] === 0) {\n              nextTileInfo[y][x][1] = 2\n            } else {\n              nextTileInfo[y][x][1] = 3\n            }\n          }\n        }\n\n        // Update terrformedness\n        for (let terrCh of turn.tiles_terraformed) {\n          let x = terrCh[0]\n          let y = terrCh[1]\n\n          let terrNum = -1\n          if (player === \"red\") {\n            terrNum = 1\n          }\n          terrNum = terrNum + nextTileInfo[y][x][0]\n\n          let terrCol = 0\n          if (terrNum > 0) {\n            terrCol = 3\n          } else if (terrNum < 0) {\n            terrCol = 4\n          }\n\n          nextGrid[y][x] = (\n            <GridSquare key={`${x}${y}`} color={terrCol} useImg={null} />\n          )\n          nextTileInfo[y][x][0] = terrNum\n          if (y === 1 && x === 1) {\n          }\n        }\n\n        // Modify robots\n        for (let robotCh of turn.robot_changes) {\n          // Remove robot at prev position if it exists\n          let robotID = robotCh[0]\n          if (robotID in prevRobots.current) {\n            let xPrev = prevRobots.current[robotID][0]\n            let yPrev = prevRobots.current[robotID][1]\n            nextRobots[yPrev][xPrev] = (\n              <RobotSquare\n                key={`${xPrev}${yPrev}`}\n                x={xPrev}\n                y={yPrev}\n                hasRobot={false}\n              />\n            )\n          }\n\n          // Add robot at new position\n          let x = robotCh[1]\n          let y = robotCh[2]\n          if (x !== -1 && y !== -1) {\n            let robotType = robotCh[3]\n            let battery = robotCh[4]\n            let robotImg\n            if (player === \"red\") {\n              if (robotType === \"e\") robotImg = ExplorerImgRed\n              else if (robotType === \"t\") robotImg = TerraformerImgRed\n              else robotImg = MinerImgRed\n            } else {\n              if (robotType === \"e\") robotImg = ExplorerImgBlue\n              else if (robotType === \"t\") robotImg = TerraformerImgBlue\n              else robotImg = MinerImgBlue\n            }\n\n            nextRobots[y][x] = (\n              <RobotSquare\n                key={`${x}${y}`}\n                srcImg={robotImg}\n                x={x}\n                y={y}\n                hasRobot={true}\n                type={robotType}\n                battery={battery}\n                id={robotID}\n              />\n            )\n            // Store robot coordinates\n            prevRobots.current[robotID] = [x, y]\n          }\n        }\n      }\n\n      var idx\n      if (sliderValue >= index) {\n        idx = index\n        const newGrid = makeDeepCopy(grid)\n        const newVisP1 = makeDeepCopy(visibilityP1)\n        const newVisP2 = makeDeepCopy(visibilityP2)\n        const newRobots = makeDeepCopy(robots)\n        const newTileInfo = makeDeepCopy3D(tiles)\n        while (idx <= sliderValue) {\n          updateFrame(idx, newGrid, newVisP1, newVisP2, newRobots, newTileInfo)\n          idx += 1\n        }\n        setGrid(newGrid)\n        setVisibilityP1(newVisP1)\n        setVisibilityP2(newVisP2)\n        setRobots(newRobots)\n        setTiles(newTileInfo)\n      } else {\n        const arr = initialGrid\n        const newGrid = makeDeepCopy(arr[0])\n        const newVisP1 = makeDeepCopy(p1InitialVis)\n        const newVisP2 = makeDeepCopy(p2InitialVis)\n        const newRobots = makeDeepCopy(initialRobots)\n        const newTileInfo = makeDeepCopy3D(arr[1])\n        idx = 0\n        while (idx <= sliderValue) {\n          updateFrame(idx, newGrid, newVisP1, newVisP2, newRobots, newTileInfo)\n          idx += 1\n        }\n        setGrid(newGrid)\n        setVisibilityP1(newVisP1)\n        setVisibilityP2(newVisP2)\n        setRobots(newRobots)\n        setTiles(newTileInfo)\n      }\n      setIndex(idx - 1)\n      if (!framePlaying) {\n        setIsPlay(false)\n      }\n    }\n    // eslint-disable-next-line\n  }, [sliderValue, gameTurns])\n\n  const iterateFrames = useCallback(() => {\n    setIndex((index) => index + 1)\n    setSliderValue((s) => s + 1)\n  }, [setSliderValue])\n\n  const runAnimation = useCallback(() => {\n    clearInterval(intervalID.current)\n    intervalID.current = null\n    intervalID.current = setInterval(iterateFrames, (500 / speed) >> 0)\n  }, [speed, iterateFrames])\n\n  useEffect(() => {\n    if (isPlay) {\n      runAnimation()\n    } else {\n      clearInterval(intervalID.current)\n      intervalID.current = null\n    }\n  }, [isPlay, setSliderValue, runAnimation])\n\n  return (\n    <div>\n      {isP2Vis && <div className=\"board visibility\">{visibilityP2}</div>}\n      {isP1Vis && <div className=\"board visibility\">{visibilityP1}</div>}\n      <div className=\"board robot\">{robots}</div>\n      <div className=\"board grid\">{grid}</div>\n    </div>\n    \n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}